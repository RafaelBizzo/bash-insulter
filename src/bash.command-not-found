print_message () {

    local messages
    local message

    messages=(
        "Boooo! Te assustei?"
        "Você não sabe nada mesmo?"
        "É só ler a porcaria do manual"
        "kk, muito ruin."
        "Nossa! Nem eu esperava algo tão errado."
        "Pathetic."
        "Essa foi a pior de todas, pelo menos até agora."
        "Usuário iniciante detectado!"
        "Sua redução de salário foi enviado para seu chefe."
        "Não acredito."
        "Cansei dessa vida."
        "Por favor, vai com calma."
        "Desinstalando todos os jogo"
        "Seleção Natural, fazer oq."
        "ERROR_INCOMPETENT_USER please unistall brain."
        "Incompetence is also a form of competence"
        "Simplesmente não."
        "Fingindo que está funcionando...."
        "Porque sempre deixam o estagiário no computador."
        "Vamos lá, confio em você!"
        "Boa tentativa."
        "Que tal você.... digitar comandos de verdade da próxima vez."
        "E se eu te contar que existem comandos de verdade?"
        "Você fala computador???"
        "Não, aqui não é o Windows."
        "Sei lá, talvez você poderia deixar a linha de comando em paz."
        "Por favor, fique longe do teclado!"
        "código de erro: 1D10T@"
        "cyka blyat!!!!"
        "Dica do dia: Desista"
        "Acho melhor você dar um tempo."
        "Não, aqui não é o Google."
        "¯\\_(ツ)_/¯"
        "Só dando um rm -rf /* para acabar com meu sofrimento"
        "Porque ser tão burro?"
        "Eu só acho que computadores não são a sua praia."
        "Porque você me faz sofrer?"
        "Será que você não tem nada de melhor para fazer?"
        "Press F to pay respect."
        "Esse é o motivo porque ninguém gosta de você."
        "Você sabe realmente oq está fazendo?"
        "Tente utilizar o seu cérebro da próxima vez."
        "Isso aqui não é tela touch."
        "Vamos fingir que isso não aconteceu."
        "Droga, o ${USER} ta errando comandos no terminal denovo!"
        "Esse é sempre você ou tu se esforça pra parecer assim?"
        "Caiu do sofá quando criança, só pode."
        "Esqueça, tente focar em outra coisa."
        "Eu realmente não sei oq te deixa tão burro, mas parece que tá funcionando."
        "Você não é tão mal quanto as pessoas falam, você é, péssimo."
        "Dois errados não fazem um certo, tome como exemplo seus pais."
        "Você deveria ter nascido em uma estrada, porque lá é onde os maiores acidentes acontecem."
        "Se burrice fosse felicidade, você com certeza seria otimista."
        "Você é a prova de que Deus tem um bom senso de humor."
        "Continue tentando, algum dia você vai fazer algo inteligente."
        "Se bosta fosse musica, você seria um orquestra."
        "Quantas vezes tenho que falar antes de você ir embora."
    )

    # If CMD_NOT_FOUND_MSGS array is populated use those messages instead of the defaults
    [[ -n ${CMD_NOT_FOUND_MSGS} ]] && messages=( "${CMD_NOT_FOUND_MSGS[@]}" )

    # If CMD_NOT_FOUND_MSGS_APPEND array is populated append those to the existing messages
    [[ -n ${CMD_NOT_FOUND_MSGS_APPEND} ]] && messages+=( "${CMD_NOT_FOUND_MSGS_APPEND[@]}" )

    # Seed RANDOM with an integer of some length
    RANDOM=$(od -vAn -N4 -tu < /dev/urandom)

    # Print a randomly selected message, but only about half the time to annoy the user a
    # little bit less.
    if [[ $((${RANDOM} % 2)) -lt 1 ]]; then
        message=${messages[${RANDOM} % ${#messages[@]}]}
        printf "\\n  %s\\n\\n" "$(tput bold)$(tput setaf 1)${message}$(tput sgr0)" >&2
    fi
}

function_exists () {
    # Zsh returns 0 even on non existing functions with -F so use -f
    declare -f $1 > /dev/null
    return $?
}

#
# The idea below is to copy any existing handlers to another function
# name and insert the message in front of the old handler in the
# new handler. By default, neither bash or zsh has has a handler function
# defined, so the default behaviour is replicated.
#
# Also, ensure the handler is only copied once. If we do not ensure this
# the handler would add itself recursively if this file happens to be
# sourced multiple times in the same shell, resulting in a neverending
# stream of messages.
#

#
# Zsh
#
if function_exists command_not_found_handler; then
    if ! function_exists orig_command_not_found_handler; then
        eval "orig_$(declare -f command_not_found_handler)"
    fi
else
    orig_command_not_found_handler () {
        printf "zsh: command not found: %s\\n" "$1" >&2
        return 127
    }
fi

command_not_found_handler () {
    print_message
    orig_command_not_found_handler "$@"
}


#
# Bash
#
if function_exists command_not_found_handle; then
    if ! function_exists orig_command_not_found_handle; then
        eval "orig_$(declare -f command_not_found_handle)"
    fi
else
    orig_command_not_found_handle () {
        printf "%s: %s: command not found\\n" "$0" "$1" >&2
        return 127
    }
fi

command_not_found_handle () {
    print_message
    orig_command_not_found_handle "$@"
}
